<?php
error_reporting(E_ALL);
/**
 * Main files.
 * It manages the start and initializes all neccessary vars/classes.
 *
 * PHP Version 5.3
 *
 * @package   FLS
 * @author    Website-Team <website-team@fls-wiesbaden.de>
 * @copyright 2011-2012 Website-Team <website-team@fls-wiesbaden.de>
 * @license   GPLv3+ http://www.gnu.org/licenses/gpl.html
 * @link      https://trac.fls-wiesbaden.de/browse/flshp/trunk/inc/Main.class.php
 */
// maybe includes in future.
use \FLS\Lib\Configuration\Configuration as Configuration;

/**
 * Main
 * It manages all neccessary prestartup, startup and poststartup routines.
 *
 * PHP Version 5.3
 *
 * @package   FLS
 * @author    Website-Team <website-team@fls-wiesbaden.de>
 * @copyright 2011-2012 Website-Team <website-team@fls-wiesbaden.de>
 * @license   GPLv3+ http://www.gnu.org/licenses/gpl.html
 * @link      https://trac.fls-wiesbaden.de/browse/flshp/trunk/inc/Main.class.php
 */
class Main {

    /**
     * @var Main instance
     */
    private static $instance = null;

    /**
     * @var long unix timestamp for start time
     */
    private $starttime;

    /**
     * Constructor
     */
    public function Main() {
        $this->starttime = microtime(true);
        self::setInstance($this);
    }

    /**
     * Set a new Main
     *
     * @param Main $main Object of Main
     *
     * @return void
     */
    public static function setInstance(Main $main = null) {
        if (self::getInstance() == null || $main == null) {
            self::$instance = $main;
        }
    }

    /**
     * Get an object of Main
     *
     * @return Main return an object of Main
     */
    public static function getInstance() {
        return self::$instance;
    }

    /**
     * The function is invokred before the normal (and repeatable) init function.
     * It does the following:
     * - creates the important objects, who should be alive, if there is an internal redirect
     * - Also here some options are set, which should be the same between redirects
     * - The data, who is recieved from the client, gets checked and cleaned
     * - The database connection gets established
     *
     * @return void
     */
    public function preInit() {
        setlocale(LC_ALL, 'de_DE', 'de_DE.UTF-8', 'de_DE.UTF-8@euro');
        // Set internal character encoding to UTF-8
        mb_internal_encoding("UTF-8");
        // Set timezone, specially for newer PHP Versions
        date_default_timezone_set("Europe/Berlin");

        //Auto-Load for files
        spl_autoload_register('Main::loadFiles');

        // New config!
        $conf = new \FLS\Lib\Configuration\Configuration(realpath(dirname(__FILE__) . DIRECTORY_SEPARATOR . '../'), 'conf/config.ini.php');

        $db = new Database2(
            $conf->datenbank->DBHOST->getValue(),
            $conf->datenbank->DBUSER->getValue(),
            $conf->datenbank->DBPASSWORD->getValue(),
            $conf->datenbank->DBNAME->getValue(),
            $conf->datenbank->persistent->getValue()
        );
        $db->setPrefix($conf->datenbank->DBPREFIX->getValue());
        $db->q('SET CHARACTER SET utf8;');

        session_start();

        // Global StatusHandler (should also work if the restart Method is invoked)
        StatusHandler::createGlobal();
    }

    /**
     * This function starts the content creation. It loads all needed Data, creates the singelton objects and is the
     * main function of the website. It could be called more than one time for an internal redirect.
     *
     * @return void
     */
    public function init() {
        $conf = Configuration::getInstance();

        // Create SOAP Server
        $soapServer = new SoapServer(
            null, 
            array(
                'uri' => $conf->soap->uri->value,
                'encoding' => 'utf-8',
                'soap_version' => SOAP_1_2
            )
        );
        $soapServer->setClass('SoapHandler');
        $soapServer->handle();
    }

    /**
     * Auto-Load function for the files of the website. Gets called automaticly by PHP.
     *
     * @param string $class_name the name of the class
     *
     * @return void
     */
    public static function loadFiles($class_name) {
        $load = '';
        // First we check if its with Namespaces:
        if (substr($class_name, 0, 4) == 'FLS\\') {
            $class_name = str_replace('\\', '/', substr($class_name, 4));
            $load = 'inc/' . $class_name . '.class.php';
        } else if (file_exists('inc/' . $class_name . '.class.php')) {
            $load = 'inc/' . $class_name . '.class.php';
        } else if (strstr($class_name, 'BoxContent')) {
            $load = 'content/box/' . $class_name . '.php';
        } else if (strstr($class_name, 'AdminContent')) {
            $load = 'content/admin/' . $class_name . '.php';
        } else if (substr($class_name, count($class_name) - 8) == 'Content' && $class_name != 'Content') {
            $load = 'content/' . $class_name . '.php';
        } else if ($class_name == 'Smarty') {
            $load = 'inc/smarty/' . $class_name . '.class.php';
        } else if (substr($class_name, 0, 7) == 'Smarty_') {
            $load = 'inc/smarty/sysplugins/' . strtolower($class_name) . '.php';
        } else {
            $load = null;
        }

        if ($load != null && file_exists($load)) {
            include_once $load;
        } else {
            // We have tried to load a class which does not exist. Trigger a warning
            trigger_error('Class ' . $class_name . ' not found.', E_USER_WARNING);
        }
    }

}    

?>
