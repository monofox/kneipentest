<?php
error_reporting(E_ALL);
/**
 * Main files.
 * It manages the start and initializes all neccessary vars/classes.
 *
 * PHP Version 5.3
 *
 * @package   FLS
 * @author    Website-Team <website-team@fls-wiesbaden.de>
 * @copyright 2011-2012 Website-Team <website-team@fls-wiesbaden.de>
 * @license   GPLv3+ http://www.gnu.org/licenses/gpl.html
 * @link      https://trac.fls-wiesbaden.de/browse/flshp/trunk/inc/Main.class.php
 */
// maybe includes in future.
use \FLS\Lib\Configuration\Configuration as Configuration;

/**
 * Main
 * It manages all neccessary prestartup, startup and poststartup routines.
 *
 * PHP Version 5.3
 *
 * @package   FLS
 * @author    Website-Team <website-team@fls-wiesbaden.de>
 * @copyright 2011-2012 Website-Team <website-team@fls-wiesbaden.de>
 * @license   GPLv3+ http://www.gnu.org/licenses/gpl.html
 * @link      https://trac.fls-wiesbaden.de/browse/flshp/trunk/inc/Main.class.php
 */
class Main {

    /**
     * @var Main instance
     */
    private static $instance = null;

    /**
     * @var long unix timestamp for start time
     */
    private $starttime;

    private $soapClient;
    
    /**
     * @var array redirectFilter
     */
    private $redirectFilter = array();

    /**
     * @var int how many redirects took place
     */
    private $redirectCount = 0;

    /**
     * @var int After how many redirects an error should be thrown (prevents an endless loop)
     */
    private $redirectLimit = 2;

    /**
     * @var string to check, if this redirect was made before
     */
    private $lastRedirectUrl = null;

    /**
     * Constructor
     */
    public function Main() {
        $this->starttime = microtime(true);
        self::setInstance($this);

        if (isset($_GET['test'])) {
            $test = $_GET['test'];
        } else {
            $test = 0;
        }

        $test = isset($_GET['test']) ? $_GET['test'] : 0;
    }

    /**
     * Set a new Main
     *
     * @param Main $main Object of Main
     *
     * @return void
     */
    public static function setInstance(Main $main = null) {
        if (self::getInstance() == null || $main == null) {
            self::$instance = $main;
        }
    }

    /**
     * Get an object of Main
     *
     * @return Main return an object of Main
     */
    public static function getInstance() {
        return self::$instance;
    }

    /**
     * The function is invokred before the normal (and repeatable) init function.
     * It does the following:
     * - creates the important objects, who should be alive, if there is an internal redirect
     * - Also here some options are set, which should be the same between redirects
     * - The data, who is recieved from the client, gets checked and cleaned
     * - The database connection gets established
     *
     * @return void
     */
    public function preInit() {
        setlocale(LC_ALL, 'de_DE', 'de_DE.UTF-8', 'de_DE.UTF-8@euro');
        // Set internal character encoding to UTF-8
        mb_internal_encoding("UTF-8");
        // Set timezone, specially for newer PHP Versions
        date_default_timezone_set("Europe/Berlin");

        //Auto-Load for files
        spl_autoload_register('Main::loadFiles');

        // New config!
        $conf = new \FLS\Lib\Configuration\Configuration(realpath(dirname(__FILE__) . DIRECTORY_SEPARATOR . '../'), 'conf/config.ini.php');

        $db = new Database2(
            $conf->datenbank->DBHOST->getValue(),
            $conf->datenbank->DBUSER->getValue(),
            $conf->datenbank->DBPASSWORD->getValue(),
            $conf->datenbank->DBNAME->getValue(),
            $conf->datenbank->persistent->getValue()
        );
        $db->setPrefix($conf->datenbank->DBPREFIX->getValue());
        $db->q('SET CHARACTER SET utf8;');

        session_start();

        // Global StatusHandler (should also work if the restart Method is invoked)
        StatusHandler::createGlobal();

        // Starting Smarty
        $tpl = new Smarty_FLS('tpl/', 'inc/smarty/tpl_c/', 'inc/smarty/cache/', 'conf/');
    }

    /**
     * This function starts the content creation. It loads all needed Data, creates the singelton objects and is the
     * main function of the website. It could be called more than one time for an internal redirect.
     *
     * @return void
     */
    public function init() {
        $url = array();
        if (isset($_GET['url'])) {
            $url = explode('/', $_GET['url']);
        }
        if (!isset($url[0])) {
            $url[0] = 'Home';
        }

        openlog('kneipentest', LOG_CONS | LOG_PERROR | LOG_PID, LOG_USER);
        syslog(LOG_INFO, 'Starting kneipentest: ' . print_r($url, true));
        $tpl = Smarty_FLS::getInstance();
        $content = new Content();

        //Here the context of the page is decided
        header("content-type: text/html; charset=utf-8");
        switch ($url[0]) {
            case 'res':
                break;
            case 'server':
                $this->initSoap();
                break;
            default:
                $this->initSoapClient();
                $c = new Content();
                //runtime
                $tpl->assign('runtime', (microtime(true) - $this->starttime));

                // Peak memory usage
                $tpl->assign('peakMemory', memory_get_peak_usage() / 1024 / 1024);

                //Content creation
                $content->buildContent($url);

                // Now send all messages:
                StatusHandler::getInstance()->sendToTemplate(true);

                // Now send all resources - We need this also for the external mode, otherwise it looks awful
                $content->sendSmartyFiles();

                $this->displayTemplate();
                break;
        }
        closelog();
    } 

    public function getSoapClient() {
        return $this->soapClient;
    }

    public function initSoapClient() {
        $this->soapClient = new SoapClient(
            null,
            array(
                'encoding' => 'utf-8',
                'soap_version' => SOAP_1_2,
                'uri' => 'http://localhost/schule/kneipentest/server',
                'location' => 'http://localhost/schule/kneipentest/server'
            )
        );
    }

    /**
     * This functions loads soaps...
     *
     * @return void
     */
    public function initSoap() {
        $conf = Configuration::getInstance();

        // Create SOAP Server
        $soapServer = new SoapServer(
            null, 
            array(
                'uri' => $conf->soap->uri->value,
                'encoding' => 'utf-8',
                'soap_version' => SOAP_1_2
            )
        );
        $soapServer->setClass('SoapHandler');
        $soapServer->handle();
    }

    /**
     * Shows the tpl file defined by the mainTpl attibute of the main class
     *
     * @param Smarty_FLS $tpl Templateengine
     *
     * @return void
     */
    private function displayTemplate() {
        try {
            Smarty_FLS::getInstance()->display('index.tpl');
        } catch (Exception $e) {
            trigger_error('Error on display page: ' . $e->getMessage(), E_USER_ERROR);
        }
    }

    /**
     * Auto-Load function for the files of the website. Gets called automaticly by PHP.
     *
     * @param string $class_name the name of the class
     *
     * @return void
     */
    public static function loadFiles($class_name) {
        $load = '';
        // First we check if its with Namespaces:
        if (substr($class_name, 0, 4) == 'FLS\\') {
            $class_name = str_replace('\\', '/', substr($class_name, 4));
            $load = 'inc/' . $class_name . '.class.php';
        } else if (file_exists('inc/' . $class_name . '.class.php')) {
            $load = 'inc/' . $class_name . '.class.php';
        } else if (strstr($class_name, 'BoxContent')) {
            $load = 'content/box/' . $class_name . '.class.php';
        } else if (strstr($class_name, 'AdminContent')) {
            $load = 'content/admin/' . $class_name . '.class.php';
        } else if (substr($class_name, count($class_name) - 8) == 'Content' && $class_name != 'Content') {
            $load = 'content/' . $class_name . '.class.php';
        } else if ($class_name == 'Smarty') {
            $load = 'inc/smarty/' . $class_name . '.class.php';
        } else if (substr($class_name, 0, 7) == 'Smarty_') {
            $load = 'inc/smarty/sysplugins/' . strtolower($class_name) . '.php';
        } else {
            $load = null;
        }

        if ($load != null && file_exists($load)) {
            include_once $load;
        } else {
            // We have tried to load a class which does not exist. Trigger a warning
            trigger_error('Class ' . $class_name . ' not found.', E_USER_WARNING);
        }
    }

    /**
     * This function does an internal rederict and recalls the init method.
     *
     * @param string $newURL the new url
     *
     * @return void
     */
    public function restart($newURL) {
        $this->redirectCount ++;
        if ($this->redirectCount <= $this->redirectLimit && $newURL != $this->lastRedirectUrl) {
            // If $newURL ist not accessable, we want to go to the start page.
            $content = Content::getInstance();
            $tmpURL = explode('/', $newURL);
            if ($tmpURL[0] != '') {
                $newURL = 'home';
            }

            $this->redirectCount++;
            $this->lastRedirectUrl = $newURL;
            foreach ($GLOBALS as $key => $value) {
                if (strpos($key, '_') !== 0 && $key != 'GLOBALS') {
                    unset($GLOBALS[$key]);
                }
            }
            //Reset static instances
            Smarty_FLS::setInstance();
            Content::setInstance();
            $i = 0;
            while ($i >= 0 && $i < count($this->redirectFilter)) {
                if ($newURL == $this->redirectFilter[$i]) {
                    $newURL = '';
                    $i = -1;
                }
                $i++;
            }
            $_GET['url'] = $newURL;
            $this->init();
            exit(0); // HRMPF @#!*$%$§)$§% ich __hasse__ es!
        } else if ($this->redirectCount <= $this->redirectLimit) {
            $this->restart('home');
        } else {
            trigger_error('Redirect limit of ' . $this->redirectLimit . ' in Main::restart() reached!', E_USER_NOTICE);
        }
    }

    /**
     * Go a page back
     *
     * @return void
     */
    public function back() {
        $url = '';
        if (isset($_SESSION['lastSite'])) {
            $url = $_SESSION['lastSite'];
        } else {
            $url = 'home';
        }
        $this->restart($url);
    }
}    

?>
